@page "/proprietario/produtos/index/{estabelecimentoId:int}"

@inject IProdutoService ProdutoService

@if (isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudPaper Elevation="3" Class="pa-4">
        <MudGrid>
            <MudItem xs="12">
                <div class="d-flex justify-space-between align-center">
                    <MudText Typo="Typo.h5">Produtos</MudText>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Add"
                               OnClick="NavigateToCreatePage">
                        Adicionar Produto
                    </MudButton>
                </div>
            </MudItem>
        </MudGrid>

        <MudTable Items="@PaginatedProdutos" Dense="true" Striped="true" Bordered="true" Loading="@isLoading">
            <ToolBarContent>
                <MudSpacer />
                <MudTextField @bind-Value="searchString"
                              Placeholder="Pesquisar..."
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium"
                              Class="mt-0"
                              Immediate="true"
                              DebounceInterval="500" />
            </ToolBarContent>

            <HeaderContent>
                <MudTh>Imagem</MudTh>
                <MudTh>Nome</MudTh>
                <MudTh>Categoria</MudTh>
                <MudTh>Preço</MudTh>
                <MudTh>Estoque</MudTh>
                <MudTh>Status</MudTh>
                <MudTh Style="text-align:center">Ações</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ToggleDetails(context.Id))">
                        @(detailsVisibility.ContainsKey(context.Id) && detailsVisibility[context.Id] ? "-" : "+")
                    </MudButton>
                </MudTd>
                <MudTd>@context.Nome</MudTd>
                <MudTd>@context.NomeCategoria</MudTd>
                <MudTd>@context.Preco.ToString("C")</MudTd>
                <MudTd>@context.QuantidadeEmEstoque</MudTd>
                <MudTd>
                    <MudText Color="@(context.Disponivel ? Color.Success : Color.Error)">
                        @(context.Disponivel ? "Disponível" : "Indisponível")
                    </MudText>
                </MudTd>
                <MudTd Style="text-align:center">
                    <MudTooltip Text="Editar">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                       Color="Color.Primary"
                                       Size="Size.Small"
                                       OnClick="@(() => EditarProduto(context.Id))" />
                    </MudTooltip>
                </MudTd>
            </RowTemplate>
            <ChildRowContent>
                @if (detailsVisibility.ContainsKey(context.Id) && detailsVisibility[context.Id])
                {
                    <MudTr>
                        <MudTd ColSpan="8">
                            <MudCard Elevation="1">
                                <MudCardContent>
                                    <MudImage Src="@($"{BaseEndPoint.BaseUrlImagem}/{context.Imagem}")"
                                              Width="300"
                                              Height="300"
                                              ObjectFit="ObjectFit.Cover"
                                              Alt="@context.Nome" />
                                </MudCardContent>
                            </MudCard>
                        </MudTd>
                    </MudTr>
                }
            </ChildRowContent>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 5, 10, 25, 50 }" />
            </PagerContent>
        </MudTable>
    </MudPaper>
}

@code {
    [Parameter]
    public int estabelecimentoId { get; set; }

    private List<Produto> produtos;
    private bool isLoading = true;
    private string searchString = "";
    private Dictionary<int, bool> detailsVisibility = new();
    private int currentPage = 1;
    private int pageSize = 10;

    private IEnumerable<Produto> FilteredProdutos =>
        string.IsNullOrWhiteSpace(searchString)
            ? produtos
            : produtos.Where(p =>
                (p.Nome?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (p.NomeCategoria?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (p.Preco.ToString("C").Contains(searchString, StringComparison.OrdinalIgnoreCase)) ||
                (p.QuantidadeEmEstoque.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            );

    private int PageCount => (int)Math.Ceiling((double)FilteredProdutos.Count() / pageSize);
    private IEnumerable<Produto> PaginatedProdutos =>
        FilteredProdutos
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            produtos = (await ProdutoService.GetProdutosByEstabelecimentoAsync(estabelecimentoId)).ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar produtos: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ToggleDetails(int produtoId)
    {
        if (detailsVisibility.ContainsKey(produtoId))
        {
            detailsVisibility[produtoId] = !detailsVisibility[produtoId];
        }
        else
        {
            detailsVisibility[produtoId] = true;
        }
    }

    private void NavigateToCreatePage()
    {
        NavigationManager.NavigateTo($"/proprietario/produtos/create/{estabelecimentoId}");
    }

    private void EditarProduto(int id)
    {
        NavigationManager.NavigateTo($"/proprietario/produtos/edit/{estabelecimentoId}/{id}");
    }
}
