@page "/proprietario/Fornecedores/edit/{estabelecimentoId:int}/{id:int}"
@inject IFornecedorService FornecedorService


@if (isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (fornecedor == null)
{
    <MudAlert Severity="Severity.Error">Fornecedor não encontrado</MudAlert>
}
else
{
    <MudPaper Elevation="3" Class="pa-4">
        <MudGrid>
            <MudItem xs="12">
                <div class="d-flex justify-space-between align-center mb-4">
                    <MudText Typo="Typo.h5">Editar Fornecedor</MudText>
                </div>
            </MudItem>
        </MudGrid>

        <MudForm @ref="form" @bind-IsValid="@isValid">
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="fornecedor.Nome"
                                  Label="Nome"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  RequiredError="Nome é obrigatório"
                                  Disabled="@isSaving" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="fornecedor.Email"
                                  Label="Email"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  RequiredError="Email é obrigatório"
                                  Disabled="@isSaving" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="fornecedor.Cnpj"
                                  Label="CNPJ"
                                  Variant="Variant.Outlined"
                                  Dense="true"
                                  Mask="@cnpjMask"
                                  Required="true"
                                  RequiredError="CNPJ é obrigatório"
                                  Placeholder="00.000.000/0000-00"
                                  Disabled="@isSaving"
                                  HelperText="Digite no formato: 00.000.000/0000-00" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="fornecedor.Telefone"
                                  Label="Telefone"
                                  Variant="Variant.Outlined"
                                  Dense="true"
                                  Mask="@phoneMask"
                                  Required="true"
                                  RequiredError="Telefone é obrigatório"
                                  Placeholder="(00) 00000-0000"
                                  Disabled="@isSaving"
                                  HelperText="Digite no formato: (00) 00000-0000" />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField @bind-Value="fornecedor.Endereco"
                                  Label="Endereço"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  RequiredError="Endereço é obrigatório"
                                  Lines="2"
                                  Disabled="@isSaving" />
                </MudItem>

                <MudItem xs="12" Class="d-flex align-center">
                    <MudCheckBox T="bool"
                                 @bind-Checked="fornecedor.Ativo"
                                 Label="Fornecedor Ativo"
                                 Color="Color.Primary"
                                 Disabled="@isSaving" />
                </MudItem>
            </MudGrid>

            <MudDivider Class="my-6" />

            <MudGrid>
                <MudItem xs="12" Class="d-flex justify-end gap-4">
                    <MudButton Color="Color.Default"
                               Variant="Variant.Outlined"
                               OnClick="Voltar"
                               Disabled="@isSaving"
                               StartIcon="@Icons.Material.Filled.ArrowBack">
                        Voltar
                    </MudButton>

                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="SaveFornecedor"
                               Disabled="@(!isValid || isSaving)"
                               StartIcon="@Icons.Material.Filled.Save">
                        @if (isSaving)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Salvando...</MudText>
                        }
                        else
                        {
                            @("Salvar")
                        }
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudForm>
    </MudPaper>
}

@code {
    [Parameter]
    public int estabelecimentoId { get; set; }

    [Parameter]
    public int id { get; set; }

    private Fornecedor fornecedor;
    private MudForm form;
    private bool isValid;
    private bool isLoading = true;
    private bool isSaving;
    private PatternMask cnpjMask = new PatternMask("00.000.000/0000-00");
    private PatternMask phoneMask = new PatternMask("(00) 00000-0000");

    protected override async Task OnInitializedAsync()
    {
        await LoadFornecedor();
    }

    private async Task LoadFornecedor()
    {
        try
        {
            fornecedor = await FornecedorService.GetFornecedorByIdAsync(id);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar fornecedor: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SaveFornecedor()
    {
        try
        {
            await form.Validate();
            if (form.IsValid)
            {
                isSaving = true;
                var sucesso = await FornecedorService.UpdateFornecedorAsync(fornecedor);

                if (sucesso)
                {
                    Snackbar.Add("Fornecedor atualizado com sucesso!", Severity.Success);
                    NavigationManager.NavigateTo($"/proprietario/Fornecedores/index/{estabelecimentoId}");
                }
                else
                {
                    Snackbar.Add("Erro ao atualizar o fornecedor.", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao salvar: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSaving = false;
        }
    }

    private void Voltar()
    {
        NavigationManager.NavigateTo($"/proprietario/Fornecedores/index/{estabelecimentoId}");
    }
}
