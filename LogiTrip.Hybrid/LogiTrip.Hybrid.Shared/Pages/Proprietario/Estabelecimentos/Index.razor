@page "/proprietario/estabelecimentos/index"
@inject IEstabelecimentoService EstabelecimentoService


@if (!AuthService.IsLoggedIn)
{
    <MudText Typo="Typo.h6" Color="Color.Error">Você não está logado. Por favor, faça login para acessar esta página.</MudText>
}
else if (isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudPaper Elevation="3" Class="pa-4">
        <MudGrid>
            <MudItem xs="12">
                <div class="d-flex justify-space-between align-center">
                    <MudText Typo="Typo.h5">Estabelecimentos</MudText>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Add"
                               OnClick="NavigateToCreatePage">
                        Adicionar
                    </MudButton>
                </div>
            </MudItem>
        </MudGrid>
        <MudTable Items="@PaginatedEstabelecimentos" Dense="true" Striped="true" Bordered="true" Loading="@isLoading">
            <ToolBarContent>
                <MudSpacer />
                <MudTextField @bind-Value="searchString"
                              Placeholder="Pesquisar..."
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium"
                              Class="mt-0"
                              Immediate="true"
                              DebounceInterval="500" />
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Razão Social</MudTh>
                <MudTh>Nome Fantasia</MudTh>
                <MudTh>CNPJ</MudTh>
                <MudTh>Telefone</MudTh>
                <MudTh>Status</MudTh>
                <MudTh Style="text-align:center">Ações</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.RazaoSocial</MudTd>
                <MudTd>@context.NomeFantasia</MudTd>
                <MudTd>@context.CNPJ</MudTd>
                <MudTd>@context.Telefone</MudTd>
                <MudTd>
                    <MudText Color="@(context.Status ? Color.Success : Color.Error)">
                        @(context.Status ? "Ativo" : "Inativo")
                    </MudText>
                </MudTd>
                <MudTd Style="text-align:center">
                    <MudTooltip Text="Editar">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                       Color="Color.Primary"
                                       Size="Size.Small"
                                       OnClick="() => EditEstabelecimento(context.Id)" />
                    </MudTooltip>
                    <MudTooltip Text="Visualizar Usuários">
                        <MudIconButton Icon="@Icons.Material.Filled.People"
                                       Color="Color.Info"
                                       Size="Size.Small"
                                       OnClick="() => NavigateToUsers(context.Id)" />
                    </MudTooltip>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 5, 10, 25, 50 }" />
            </PagerContent>
        </MudTable>
    </MudPaper>
}

@code {
    private List<Estabelecimento> estabelecimentos = new();
    private bool isLoading = true;
    private string searchString = "";
    private int currentPage = 1;
    private int pageSize = 10;

    private IEnumerable<Estabelecimento> FilteredEstabelecimentos =>
        string.IsNullOrWhiteSpace(searchString)
            ? estabelecimentos
            : estabelecimentos.Where(e =>
                (e.RazaoSocial?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (e.NomeFantasia?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (e.CNPJ?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (e.Telefone?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            );

    private int PageCount => (int)Math.Ceiling((double)FilteredEstabelecimentos.Count() / pageSize);
    private IEnumerable<Estabelecimento> PaginatedEstabelecimentos =>
        FilteredEstabelecimentos
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadEstabelecimentos();
    }

    private async Task LoadEstabelecimentos()
    {
        try
        {
            isLoading = true;
            var currentUser = await AuthService.GetUserAsync();

            if (currentUser == null)
            {
                Snackbar.Add("Usuário não autenticado", Severity.Error);
                NavigationManager.NavigateTo("/");
                return;
            }

            estabelecimentos = (await EstabelecimentoService.GetEstabelecimentosByProprietarioAsync(currentUser.Id)).ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar estabelecimentos: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateToCreatePage()
    {
        NavigationManager.NavigateTo("/proprietario/estabelecimentos/create");
    }

    private void EditEstabelecimento(int id)
    {
        NavigationManager.NavigateTo($"/proprietario/estabelecimentos/edit/{id}");
    }

    private void NavigateToUsers(int estabelecimentoId)
    {
        NavigationManager.NavigateTo($"/proprietario/usuarios/index/{estabelecimentoId}");
    }
}
