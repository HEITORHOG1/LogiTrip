@page "/proprietario/categorias/edit/{estabelecimentoId:int}/{id:int}"
@inject ICategoriaService CategoriaService


@if (isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (categoria == null)
{
    <MudAlert Severity="Severity.Error">Categoria não encontrada.</MudAlert>
}
else
{
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
        <MudPaper Elevation="3" Class="pa-4">
            <MudGrid>
                <MudItem xs="12">
                    <div class="d-flex justify-space-between align-center mb-4">
                        <MudText Typo="Typo.h5">Editar Categoria</MudText>
                    </div>
                </MudItem>
            </MudGrid>

            <MudForm @ref="form" @bind-IsValid="@isValid">
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="categoria.Nome"
                                      Label="Nome"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      RequiredError="Nome é obrigatório"
                                      Disabled="@isSaving" />
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="categoria.Descricao"
                                      Label="Descrição"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      RequiredError="Descrição é obrigatória"
                                      Lines="3"
                                      Disabled="@isSaving" />
                    </MudItem>

                    <MudItem xs="12" Class="d-flex align-center">
                        <MudCheckBox T="bool"
                                     @bind-Checked="categoria.Ativo"
                                     Label="Categoria Ativa"
                                     Color="Color.Primary"
                                     Disabled="@isSaving" />
                    </MudItem>
                </MudGrid>

                <MudDivider Class="my-6" />

                <MudGrid>
                    <MudItem xs="12" Class="d-flex justify-end gap-4">
                        <MudButton Color="Color.Default"
                                   Variant="Variant.Outlined"
                                   OnClick="Voltar"
                                   Disabled="@isSaving"
                                   StartIcon="@Icons.Material.Filled.ArrowBack">
                            Voltar
                        </MudButton>

                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   OnClick="SalvarAlteracoes"
                                   Disabled="@(!isValid || isSaving)"
                                   StartIcon="@Icons.Material.Filled.Save">
                            @if (isSaving)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2">Salvando...</MudText>
                            }
                            else
                            {
                                @("Salvar")
                            }
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudPaper>
    </MudContainer>
}

@code {
    [Parameter] public int estabelecimentoId { get; set; }
    [Parameter] public int id { get; set; }

    private Categoria categoria;
    private MudForm form;
    private bool isValid;
    private bool isLoading = true;
    private bool isSaving;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategoria();
    }

    private async Task LoadCategoria()
    {
        try
        {
            categoria = await CategoriaService.GetCategoriaByIdAsync(estabelecimentoId, id);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar categoria: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SalvarAlteracoes()
    {
        try
        {
            await form.Validate();
            if (form.IsValid)
            {
                isSaving = true;

                var sucesso = await CategoriaService.UpdateCategoriaAsync(categoria);

                if (sucesso)
                {
                    Snackbar.Add("Categoria atualizada com sucesso!", Severity.Success);
                    NavigationManager.NavigateTo($"/proprietario/categorias/index/{estabelecimentoId}");
                }
                else
                {
                    Snackbar.Add("Erro ao atualizar categoria.", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao salvar: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSaving = false;
        }
    }

    private void Voltar()
    {
        NavigationManager.NavigateTo($"/proprietario/categorias/index/{estabelecimentoId}");
    }
}

